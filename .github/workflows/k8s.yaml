name: CI-CD - Build, Scan, Push, and Deploy to EKS

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-scan-docker:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Java
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # 3. SonarQube Scan
      #- name: SonarQube Scan
       # run: |
        #  mvn -B verify sonar:sonar \
         #   -Dsonar.projectKey=web-calci \
          #  -Dsonar.host.url=${{ vars.SONAR_HOST_URL }} \
           # -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # 4. Build with Maven
      - name: Build with Maven
        run: mvn -B -ntp package

      # 5. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Build Docker image
      - name: Build Docker image
        run: |
          IMAGE=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/web-calci
          docker build -t $IMAGE:latest -t $IMAGE:${{ github.sha }} .

      # 7. Trivy Scan Docker image
      - name: Trivy Scan Docker image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/web-calci:latest
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true

      # 8. Push Docker image
      - name: Push Docker image
        run: |
          IMAGE=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/web-calci
          docker push $IMAGE:latest
          docker push $IMAGE:${{ github.sha }}

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-scan-docker

    steps:
      # 1. Checkout repo (for k8s manifests if needed)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3. Update kubeconfig for EKS
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name my-cluster --region ca-central-1
        
     # 4. Apply Deployment manifest (creates if missing, updates if exists)
      - name: Apply Kubernetes Deployment
        run: kubectl apply -f k8s/deployment.yaml

      # 5. Apply service manifest
      - name: Apply Kubernetes Service
        run: kubectl apply -f k8s/service.yaml

      
        

      # 5. Deploy to EKS
      - name: Deploy to EKS
        run: |
          IMAGE=docker.io/${{ secrets.DOCKERHUB_USERNAME }}/web-calci:${{ github.sha }}
          kubectl set image deployment/web-calci web-calci=$IMAGE --record
          kubectl rollout status deployment/web-calci
